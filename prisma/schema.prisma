generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(uuid())
  email     String?     @unique
  fullName  String
  phone     String?
  isAdmin   Boolean     @default(false)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt
  cart      Cart?
  favorites Favorites[]
}

model Category {
  id            Int           @id @default(autoincrement())
  name          String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  color         String
  image         String
  subCategories SubCategory[]
}

model SubCategory {
  id         Int       @id @default(autoincrement())
  name       String
  categoryId Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  products   Product[]
  category   Category  @relation(fields: [categoryId], references: [id])
}

model Product {
  id              Int             @id @default(autoincrement())
  name            String
  image           String
  quantityPerUnit Int
  unit            String
  subCategoryId   Int
  linkCarulla     String?
  linkExito       String?
  linkJumbo       String?
  linkOlimpica    String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  favorites       Favorites[]
  SubCategory     SubCategory     @relation(fields: [subCategoryId], references: [id])
  productPrices   ProductPrice[]
  productPrices2  ProductPrice2[]
}

model ProductPrice {
  id          Int         @id @default(autoincrement())
  productId   Int
  price       Float
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  superMarket SuperMarket
  cartItems   CartItem[]
  proudct     Product     @relation(fields: [productId], references: [id])
}

model ProductPrice2 {
  id            Int      @id @default(autoincrement())
  productId     Int
  priceExito    Int?
  priceOlimpica Int?
  priceJumbo    Int?
  priceCarulla  Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @updatedAt
  proudct       Product  @relation(fields: [productId], references: [id])
}

model Cart {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userEmail String?    @unique
  user      User?      @relation(fields: [userEmail], references: [email])
  cartItems CartItem[]
}

model CartItem {
  id        Int          @id @default(autoincrement())
  quantity  Int
  cartId    Int
  productId Int
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  Card      Cart         @relation(fields: [cartId], references: [id])
  product   ProductPrice @relation(fields: [productId], references: [id])
}

model Subscription {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Favorites {
  userId    String
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, productId])
}

enum SuperMarket {
  Olimpica
  Carulla
  Exito
  Jumbo
}

model Offer {
  id       Int      @id @default(autoincrement())
  title    String
  content  String
  image    String
  link     String
  size     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}